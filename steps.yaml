GroupGPS.....,
RealTimeRadar
TrackFusion
TrackMate
SpotOn

WORKING RULE--->

*)  check if the browser supports geolocation.

*)  set option for high accuracy , a 5-second timeout , and no catching . use WatchPosition  to track the user location continuously . Emit the
    latitude and longitude via the socket with "send-location" .log any error to the console.

*)  Initialise a map centered at coordinates(0,0) with a zoom level of 15 using Leaflet. Add OpenStreetmap tiles to the map

*)  Create an empty object marker .

*)  When receving location data via the socket , extract id , latitude , and longitude , and center the map on the new coordinates.

*)  If a marker for the Id exists , update its position ,otherwise , create a new marker at the given coordinates, and add it to the map. When
    a user dissconnects, remove there marker from the map and delete it from markers. 



    BASE CLIENT SIDE CODE=>




const socket = io();

if (navigator.geolocation) {
    navigator.geolocation.watchPosition(
        (position) => {
        const { latitude, longitude } = position.coords;
        socket.emit("send-location", { latitude, longitude });

    },
        (error) => {
            console.error(error);
        },
        {
            enableHighAccuracy: true ,
            timeout: 3000,
            maximumAge: 0
        }
    );
}

var map = L.map("map").setView([0, 0], 16);

L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution:"createdbyShyam"
}).addTo(map);

const markers = {}  ;

socket.on("receive-location", (data) => {
    const { id, latitude, longitude } = data;
    map.setView([latitude, longitude]);
    if(markers[id]){
        markers[id].setLatLng([latitude, longitude]);
    }
    else{
        markers[id] = L.marker([latitude, longitude]).addTo(map) ;
    }
});


socket.on("user-disconnected", (id) => {
    if (markers[id]){
        map.removeLayer(markers[id]);
        delete markers[id];
    }
});